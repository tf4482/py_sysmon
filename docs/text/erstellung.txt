Projekterstellung:

- Setup
    Als erstes erstellen wir mit PyCharm ein neues Projekt. Wir nennen es „py_sysmon“ und wählen als Interpreter die Python 3.12 die aktuelleste, verfügbare Python-Version aus. Es ist „best practice“, eine virtuelle Umgebung für Python-Projekte zu verwenden. Dies hilft, Abhängigkeiten und Paketversionen spezifisch für ein Projekt zu verwalten. PyCharm sollte dies im übrigen automatisch tun, wenn ein neues Projekt erstellt wird.


- Grundlegende Projektstruktur
    Als erstes wird ein neues Verzeichnis „src“ im Projektverzeichnis erstellt. In diesem Verzeichnis werden alle Python-Dateien gespeichert, die für das Projekt von nöten sind. Wir erstellen auch ein Verzeichnis „tests“, in dem Tests abgelegt werden, außerdem ein Verzeichnis „docs“ für die Dokumentation.

    src: Alle Python-Dateien, die für das System-Monitoring-Tool relevant sind, sollten hier abgelegt werden. Dazu gehören die Hauptanwendungsdatei (main.py), sowie Module, die verschiedene Funktionen des Tools umsetzen (z.B. Systemüberwachung, GUI-Elemente, Datenmanagement).

    tests: Dieses Verzeichnis wird dazu verwendet um Unit-Tests und Integrationstests für das Projekt zu schreiben.

    docs: Hier wird die Dokumentation des Projekts gespeichert. Das sind zb. die Anforderungsspezifikation, die Architektur, die Benutzerdokumentation und die Entwicklerdokumentation.


- Erstellen der ersten Python-Datei
    Wir erstellen eine neue Python-Datei „main.py“ im Verzeichnis „src“. Diese Datei wird die Hauptanwendung des System-Monitoring-Tools enthalten.


- Dependencies bzw. Bibliotheken
    Um das Projekt zu starten, müssen wir einige Bibliotheken installieren. Wir planen folgende Bibliotheken zu verwenden:

    - psutil: Eine Bibliothek, die es ermöglicht, Systeminformationen zu sammeln.
    - matplotlib: Eine Bibliothek für die Diagrammerstellung.
    - PyQt5: PyQt5 ist eine Bibliothek, welche für die Erstellung von GUIs verwendet wird.
    - pyqtgraph: Wird benötigt, um die Diagramme in der GUI darzustellen.
    - pyinstaller: Bibliothek zur Bündelung des Projekts.

    Um diese Bibliotheken zu installieren, müssen wir die Datei „requirements.txt“ erstellen. Diese Datei enthält alle Bibliotheken, die für das Projekt benötigt werden. Wir können diese Datei mit dem Befehl „pip install -r requirements.txt“ installieren oder die PyCharm-Funktion „Install requirements“ nutzen. Diese requirements.txt wird üblicherweise im Hauptverzeichnis des Projekts gespeichert.


- Versionskontrolle
    Hoppla! Es wurde ganz vergessen ein Versionskontrollsystem zu initialisieren. Das ist aber kein Problem, denn wir können das ganz einfach nachholen. Dazu öffnen wir die Konsole und navigieren in das Projektverzeichnis. Dort führen wir den Befehl „git init“ aus.

    Nun haben wir ein lokales Git-Repository erstellt. Wir können nun alle Dateien, die wir in unserem Projektverzeichnis haben, dem Repository hinzufügen. Dazu führen wir den Befehl „git add .“ aus. Der Punkt bedeutet, dass alle Dateien hinzugefügt werden sollen. Wenn wir nur bestimmte Dateien hinzufügen wollen, können wir diese auch explizit angeben. Zum Beispiel „git add main.py“.

    Auch erstellen wir ein Online-Repository bei GitHub. Dort können wir unser lokales Repository hochladen. Dazu müssen wir zunächst ein neues Repository erstellen. Wir nennen es „py_sysmon“. Wir können nun die URL des Repositories kopieren und in der Konsole den Befehl „git remote add origin <URL>“ ausführen. Nun können wir die Dateien in das Online-Repository hochladen. Dazu führen wir den Befehl „git push -u origin main“ aus. Nun sind alle Dateien in unserem Online-Repository gespeichert.

    Zum Thema Lizensierung: Dieses Projekt wird unter der MIT-Lizenz veröffentlicht. Diese Lizenz erlaubt es, das Projekt zu verwenden, zu kopieren, zu modifizieren, zu veröffentlichen, zu verkaufen und zu vertreiben. Es ist lediglich nötig, den Urheberrechtsvermerk und die Lizenzbedingungen in Kopien der Software beizubehalten. Die Lizenzbedingungen sind in der Datei „LICENSE“ zu finden.

    Dee Datei .gitignore enthält alle Dateien, die nicht in das Repository hochgeladen werden sollen. Dazu gehören zum Beispiel die Dateien, die von PyCharm erstellt werden, sowie die Dateien, die von der Kompilierung des Projekts erstellt werden. Diese Dateien sind nicht relevant für das Projekt und sollten daher nicht in das Repository hochgeladen werden. Da wir eine JetBrains IDE verwenden, entscheiden wir uns dazu den gesamten .idea Ordner zu ignorieren. Auch .code-workspace-Dateien sehen wir zum ignorieren vor welche von Visual Studio Code für Projekte erstellt werden, falls wir uns während des Projekts dazu entscheiden sollten die IDE zu wechseln.

    Die Datei README.md enthält eine kurze Beschreibung des Projekts und eine Anleitung zur Installation und Verwendung des Projekts. Diese Datei wird in der Regel im Hauptverzeichnis des Projekts gespeichert. Auch Angaben zur Lizensierung des Projekts sollten in dieser Datei enthalten sein.

    An diesem Punkt erstellen wir auch die ersten Branches für das Projekt. Der Branch „main“ wurde bereits erstellt und enthält bereits die ersten zwei commits. Dazu erstellen wir den Branch „dev“. Der Branch „main“ enthält den aktuellen Stand des Projekts. Der Branch „dev“ enthält die aktuelle Entwicklungsversion des Projekts. Wenn wir neue Features entwickeln, werden wir diese in einem eigenen Branch entwickeln und dann in den Branch „dev“ mergen. Wenn wir eine neue Version des Projekts veröffentlichen wollen, mergen wir den Branch „dev“ in den Branch „main“.
    Branches werden erstellt mit dem BEfehl „git branch <branchname>“ und gewechselt mit dem Befehl „git checkout <branchname>“.


- Datensicherheit
    Die Versionskontrolle mit git liefert und schon eine sehr gute Sicherheit unserer Projektdaten, zusätzlich empfiehlt es sich aber natürlich noch eine weitere Datensicherungsmethode anzuwenden, beispielsweise ein Backup-Skript. Ein Beispiel wie ein solches Skript aussehen kann findet sich im Dokumentationsverzeichniss unter misc/backup_project.bat bzw. im Anhang dieser Dokumentation. Außerdem bietet PyCharm mit der Funktion „Lokal History“ auch noch ein eigenes Versionskontrollsystem. Grundsätzlich empfiehlt es sich in der Softwareentwicklung, eigentlich allgemein in der Datenverarbeitung, immer mehrere Backuplösungen parallel zu nutzen. Besser ein Backup haben und es nicht brauchen, als es zu brauchen und nicht zu haben. Natürlich muss man auch hier abwägen zwischen Benutzbarkeit und Sicherheit, aber solange entsprechende Maßnahmen das Projekt nicht über Gebühr einschränken, spricht nichts dagegen.


- MVC-Modell
    Wir haben uns entschieden, das MVC-Modell für die Architektur unseres Projekts zu verwenden. MVC steht für Modell-View-Controller. Das Modell ist für die Datenverwaltung verantwortlich. Es enthält die Daten, die von der Anwendung verarbeitet werden. Die View ist für die Darstellung der Daten zuständig. Sie enthält die Benutzeroberfläche, die dem Benutzer angezeigt wird. Der Controller ist für die Datenverarbeitung verantwortlich. Er enthält die Logik, die die Daten verarbeitet.

    Das MVC-Modell ist ein weit verbreitetes Modell für die Softwarearchitektur. Es eignet sich sehr gut für die Entwicklung von GUI-Anwendungen. Es ermöglicht eine klare Trennung zwischen Datenverwaltung, Datenverarbeitung und Präsentation. Dadurch verbessert sich die Wartbarkeit und Erweiterbarkeit der Software. Außerdem ermöglicht es eine parallele Entwicklung der verschiedenen Komponenten.

    Insgesamt ist das MVC-Modell eine ausgezeichnete Wahl für die Entwicklung von GUI-Anwendungen, da es die genannten Vorteile bietet.


- Programmieren
    Fangen wir zunächst das Fenster der Anwendung zu implementieren. Wir entscheiden uns zunächst für eine initiale Größe von 600 mal 400 Pixeln und legen einen festen Punkt uf dem Biildschirm fest, wo das Fenster der Anwendung bei Programmstart erscheint, das sind die x und y Koordinaten 100. Auch definieren wir an dieser Stelle den Titel des Fensters ("py_sysmon"). Das erste Label wird auch hier festgelegt ("CPU Usage").
    Davor haben wir auch die ersten Module und Klassen die wir zunächst brauchen impoprtiert. Wir commiten die Änderungen und pushen sie in den Branch "dev".

    Mithilfe der psutil-Bibliothek haben wir die Funktion get_cpu_usage programmiert. Diese Funktion holt uns die aktuelle CPU-Auslastung in Prozent.
    Die MainController-Klasse, die wir neu hinzugefügt haben, kümmert sich darum, dass die CPU-Auslastung auch im Fenster angezeigt wird. Die Methode get_cpu_usage aktualisiert regelmäßig das Label mit den neuesten Daten zur CPU-Auslastung.

- Starten der Anwendung:
    Der Abschnitt if __name__ == "__main__": ist unser Startsignal. Hier wird MainController aktiviert und die Anwendung startet mit der Darstellung der Systeminformationen.

-Aktualisierung der Anwendungslogik:
    Nachdem wir das Grundgerüst unserer Anwendung etabliert hatten, konzentrierten wir uns darauf, die Logik zur Überwachung der Systemleistung zu verfeinern und zu erweitern.

    Um eine regelmäßige Aktualisierung der Systeminformationen zu gewährleisten, haben wir die QTimer-Klasse aus PyQt5 eingeführt. Dieser Timer wird verwendet, um die CPU-Auslastung jede Sekunde zu aktualisieren, was eine kontinuierliche Überwachung ermöglicht.

    In der MainController-Klasse haben wir den QTimer konfiguriert und mit unserer update_cpu_usage-Methode verbunden. Der Timer sendet alle 1000 Millisekunden (1 Sekunde) ein Signal, das diese Methode aufruft, um die CPU-Auslastung zu ermitteln und das Label in unserem Hauptfenster entsprechend zu aktualisieren.

- Optimierung der Update-Methode:
    Die update_cpu_usage-Methode wurde dahingehend optimiert, dass sie direkt auf die psutil.cpu_percent()-Funktion zugreift, ohne ein Intervall zu benötigen. Dies verbessert die Effizienz der Methode und gewährleistet, dass die CPU-Auslastungsinformationen in Echtzeit aktualisiert werden. Die alte get_cpu_usage-Methode wurde entfernt, da sie nicht mehr benötigt wird.

- Verbesserung der Anwendungsleistung:
    Durch die Verwendung des Timers stellen wir sicher, dass unsere Anwendung effizient und reaktionsfähig bleibt. Da die update_cpu_usage-Methode jetzt durch den Timer gesteuert wird, verhindern wir blockierende Aufrufe und ermöglichen eine flüssigere Benutzererfahrung. Diese Verbesserungen tragen zur Stabilität und Effizienz der Anwendung bei und ermöglichen eine genauere und zuverlässigere Überwachung der Systemleistung. Durch die kontinuierliche Aktualisierung der CPU-Auslastung kann der Benutzer die Leistung seines Systems in Echtzeit überwachen.

- Erweiterung der Anwendungslogik
    Wir haben die Anwendungslogik erweitert, um die die Speicherauslastung des Systems zu überwachen. Dazu haben wir die Funktion get_cpu_usage umbenannnt in update_system_info. Die Funktion update_system_info aktualisiert nun die CPU- und Speicherauslastung des Systems. In ähnlicher Weise fügen wir nun nach und nach weitere Funktionalitäten hinzu.

- Zusätzliche UI-Elemente
    Wir fügen der Anwendung auch einen Button hinzu (close) zum einfachen beenden. Wir platzieren ihn in der rechten unteren Ecke des Fensters. Wir möchten allerdings irgendwann auch noch die Dimensionen des Fensters ändern, also ändern wir die Implementierung des Buttons dahingehend, das seine Position relativ zu den vorher bestimmten Maßen des Hauptfensteres festgelegt wird. Aber leider haben wir auch diese Änderung nicht zuende gedacht. Wird jetzt die Anwendung aufgerufen, wird der Button twar immer richtig platziert, unabhängig davon welche Maße wir im Programm definiert haben, ändert aber der Nutzer im laufenden Betrieb die Größe des Fensters, wird der Button nicht mit verschoben. Wir müssen also noch eine Möglichkeit finden, die Position des Buttons dynamisch zu halten. 
    Wir überschreiben Sie die resizeEvent-Methode in Ihrer SystemMonitorWindow-Klasse. In der resizeEvent-Methode, aktualisieren wir die Position des Buttons basierend auf der neuen Fenstergröße. Das bedeutet für uns konkret, die Methode update_button_position wird sowohl in initUI als auch in resizeEvent aufgerufen. Dadurch wird sichergestellt, dass der Button bei der Initialisierung und bei jeder Größenänderung des Fensters richtig positioniert wird. Die resizeEvent-Methode überschreibt das Standardverhalten von QMainWindow bei einer Größenänderung, indem sie die Button-Position 
    aktualisiert und dann das ursprüngliche resizeEvent aufruft.

- Speichern der Daten
    Die erhobenen Daten wollen wir nun bei jeder Erhebung in einer SQLite Datenbank abspeichern. Da SQLite eine eingebettete SQL-Datenbank ist, müssen wir keinen separaten Datenbankserver installieren oder konfigurieren. Wir können direkt in Python mit SQLite arbeiten, um die Daten zu speichern. Außerdem ist SQLite in der Standardbibliothek von Python enthalten, daher müssen wir normalerweise nichts zusätzlich installieren, um es zu verwenden.
    Als erstes impoprtieren wir „sqlite3“ in unserer Python-Skript, dann stellen wir eine Verbindung zu einer SQLite-Datenbankdatei her. Wenn die Datei nicht existiert, wird sie automatisch erstellt. In userem Projekt nennen wird die Datei py_sysmon_data.db. Wir updaten auch unsere -gitignore Datei, damit die Datenbankdatei nicht in das Repository hochgeladen wird. Dann fügen wir bei jedem Programmzylkus die Daten in die Datenbank ein wobei jeder Wert seine eigene Tabelle hat, vielleicht möchten wir dem einzelnen Wert später noch weitere Informationen hinzufügen. Auch sorgen wir dafür, das jeder Spalte maximal 1000 Einträge zugeordnet werden können, danach werden die ältesten Einträge gelöscht. Das ist nötig, da wir die Daten später in einem Diagramm darstellen wollen und die Datenmenge nicht zu groß werden soll.

- Erstellen der Diagramme
    Wir nutzen jetzt das Modul matplotlib um in einem neuen Anwendungsfenster ein Diagramm darzustellen welches die einzlenen erhobenen Werte aus der Datenbank ausließt, farbig abgegrenzt und fortlaufend darstellt. Auch einen neuen Button im Hauptfenster zum öffnen des Diagrammfensters fügen wir hinzu. Jetzt fehlen nur noch animierte Kurven, wir implementiere Diese, in dem wir eine Funktion erstellen zum auslesen der Daten aus der Datenbank, fetch_data. Dann erweitern wir die Visualisierungsfunktion update_plot um die Werte für cpu_usage, memory_usage und disk_usage darzustellen. Somit haben wir die geplanten Funktionalitäten umgesetzt.

- Erstellen der direkt ausführbaren Anwendung
    Wir nutzen jetzt PyInstaller um aus unserem Projekt eine ausführbare, von Python unabhängige Anwendung zu erstellen. Das machen wir mit dem Befehl Konsolenbefehl „pip install pyinstaller“ auf der Windows Kommandozeile, wechseln in das „src“ Verzeichniss unsere Projekts und kopieren erst die Datei main.py zu main.pyw. Wir tun das, damit wir später kein überflüssiges Konsolenfesnter bei der Ausführung der Anwendung haben. Dann führen wir den Befehl „pyinstaller --onefile main.pyw“ aus. Das erstellt eine ausführbare Datei „main.exe“ im Verzeichniss „dist“ unseres Projekts. Diese Datei können wir nun auf jedem Windows-System ausführen, ohne das Python installiert sein muss, pyinstaller hat alle nötigen Abhängigkeiten in dieser einen Datei gebündelt. Es muss besonders darauf hingewiesen werden, das hier keine klassische Kompiliereung stattfindet, sondern wirklich nur ein Bündeln des Projekts. Um den Vorgang zu vereinfachen, erstellen wir eine Windows-Batchdatei „build.bat“ die den Vorgang automatisiert. Diese Datei befindet sich im root Verzeichniss unseres Projekts.
